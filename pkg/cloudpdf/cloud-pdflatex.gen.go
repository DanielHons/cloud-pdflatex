//go:build go1.22

// Package cloudpdf provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.2-0.20250102212541-8bbe226927c9 DO NOT EDIT.
package cloudpdf

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// JsonError defines model for JsonError.
type JsonError struct {
	Message string `json:"message"`
}

// PostConvertParams defines parameters for PostConvert.
type PostConvertParams struct {
	TexEntrypoint *string `form:"tex-entrypoint,omitempty" json:"tex-entrypoint,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetHeartbeat request
	GetHeartbeat(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConvertWithBody request with any body
	PostConvertWithBody(ctx context.Context, params *PostConvertParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetHeartbeat(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHeartbeatRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConvertWithBody(ctx context.Context, params *PostConvertParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConvertRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetHeartbeatRequest generates requests for GetHeartbeat
func NewGetHeartbeatRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/__heartbeat__")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostConvertRequestWithBody generates requests for PostConvert with any type of body
func NewPostConvertRequestWithBody(server string, params *PostConvertParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/convert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TexEntrypoint != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tex-entrypoint", runtime.ParamLocationQuery, *params.TexEntrypoint); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetHeartbeatWithResponse request
	GetHeartbeatWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHeartbeatResponse, error)

	// PostConvertWithBodyWithResponse request with any body
	PostConvertWithBodyWithResponse(ctx context.Context, params *PostConvertParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConvertResponse, error)
}

type GetHeartbeatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetHeartbeatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHeartbeatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConvertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *JsonError
	JSON500      *JsonError
}

// Status returns HTTPResponse.Status
func (r PostConvertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConvertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetHeartbeatWithResponse request returning *GetHeartbeatResponse
func (c *ClientWithResponses) GetHeartbeatWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHeartbeatResponse, error) {
	rsp, err := c.GetHeartbeat(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHeartbeatResponse(rsp)
}

// PostConvertWithBodyWithResponse request with arbitrary body returning *PostConvertResponse
func (c *ClientWithResponses) PostConvertWithBodyWithResponse(ctx context.Context, params *PostConvertParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConvertResponse, error) {
	rsp, err := c.PostConvertWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConvertResponse(rsp)
}

// ParseGetHeartbeatResponse parses an HTTP response from a GetHeartbeatWithResponse call
func ParseGetHeartbeatResponse(rsp *http.Response) (*GetHeartbeatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHeartbeatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostConvertResponse parses an HTTP response from a PostConvertWithResponse call
func ParsePostConvertResponse(rsp *http.Response) (*PostConvertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConvertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest JsonError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest JsonError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /__heartbeat__)
	GetHeartbeat(w http.ResponseWriter, r *http.Request)
	// Konvertiert eine .tag.gzip-Datei in ein PDF.
	// (POST /convert)
	PostConvert(w http.ResponseWriter, r *http.Request, params PostConvertParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetHeartbeat operation middleware
func (siw *ServerInterfaceWrapper) GetHeartbeat(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHeartbeat(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostConvert operation middleware
func (siw *ServerInterfaceWrapper) PostConvert(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostConvertParams

	// ------------- Optional query parameter "tex-entrypoint" -------------

	err = runtime.BindQueryParameter("form", true, false, "tex-entrypoint", r.URL.Query(), &params.TexEntrypoint)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tex-entrypoint", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostConvert(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/__heartbeat__", wrapper.GetHeartbeat)
	m.HandleFunc("POST "+options.BaseURL+"/convert", wrapper.PostConvert)

	return m
}

type GetHeartbeatRequestObject struct {
}

type GetHeartbeatResponseObject interface {
	VisitGetHeartbeatResponse(w http.ResponseWriter) error
}

type GetHeartbeat200Response struct {
}

func (response GetHeartbeat200Response) VisitGetHeartbeatResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetHeartbeat500Response struct {
}

func (response GetHeartbeat500Response) VisitGetHeartbeatResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type PostConvertRequestObject struct {
	Params PostConvertParams
	Body   io.Reader
}

type PostConvertResponseObject interface {
	VisitPostConvertResponse(w http.ResponseWriter) error
}

type PostConvert200ResponseHeaders struct {
	ContentDisposition string
}

type PostConvert200ApplicationpdfResponse struct {
	Body          io.Reader
	Headers       PostConvert200ResponseHeaders
	ContentLength int64
}

func (response PostConvert200ApplicationpdfResponse) VisitPostConvertResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/pdf")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("Content-Disposition", fmt.Sprint(response.Headers.ContentDisposition))
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type PostConvert400JSONResponse JsonError

func (response PostConvert400JSONResponse) VisitPostConvertResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostConvert500JSONResponse JsonError

func (response PostConvert500JSONResponse) VisitPostConvertResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /__heartbeat__)
	GetHeartbeat(ctx context.Context, request GetHeartbeatRequestObject) (GetHeartbeatResponseObject, error)
	// Konvertiert eine .tag.gzip-Datei in ein PDF.
	// (POST /convert)
	PostConvert(ctx context.Context, request PostConvertRequestObject) (PostConvertResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetHeartbeat operation middleware
func (sh *strictHandler) GetHeartbeat(w http.ResponseWriter, r *http.Request) {
	var request GetHeartbeatRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetHeartbeat(ctx, request.(GetHeartbeatRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHeartbeat")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetHeartbeatResponseObject); ok {
		if err := validResponse.VisitGetHeartbeatResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostConvert operation middleware
func (sh *strictHandler) PostConvert(w http.ResponseWriter, r *http.Request, params PostConvertParams) {
	var request PostConvertRequestObject

	request.Params = params

	request.Body = r.Body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostConvert(ctx, request.(PostConvertRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostConvert")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostConvertResponseObject); ok {
		if err := validResponse.VisitPostConvertResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RUwXLbOAz9FQ52j7Ls3exetLOXxkmT9pKZNqcm49ASJDGRSAaEXLse/U0/o7f8WAeU",
	"YzuO20unJ8MiiPce8Ig15K71zqLlANkaQl5jq2P4Ljh7RuRI/nhyHokNxqMWQ9AVSohL3foGIYNrWz19",
	"a9hUqKaa0ShXIKn3zi7iRepsFUqsG6QUEuCVl0uBydgK+j4BwsfOEBaQfdoC3G4T3fwec4ZeMo0tnWCz",
	"4Yh8NT1XOaFmR5DAAikYZyGDv9JJOoEEliO3QGr0aqS9b4xACHCXc0dYPB9Cn4DzaLU3kMFJOklPIAGv",
	"uY6ax7NZjZp4jppnM/lSIctPgSEn43nAvEDdcJ3XmD9ArEdaTi4F8y3yxXMJEMHBOxuGlv49mRwtJtUi",
	"tX+PJVzbGjcZfQKsqyDd2weRuIjxraSM82EecaYuxN+XJK9c4NNNksgn3SIjSeE1GAF97JBWkIDVrXSf",
	"cTlCy7Tyzli5M3hoIFvqrmHIoNXGpoxLSA4UfKxRyaFiXKrSNKjYKVxi3jEqrlFtCCMpZ4/45nYwDgZ+",
	"44qVgObOMtqoLI47j9rGLmfkUWBC3e6cLlHpqNVCcm6sjsoOQfpD1mfGokpZU1p9MX40+F03Qc2NffpK",
	"wwuwKey7mqnD/vjUf0DZF+WvM6XSNRWhyWv1sH2LjEFdTc+FYI26iONdw+lAYzQ1wbtghgqvLBewUM42",
	"K/XZcK3uDgjfqa1Aqb5bD5pZ53WLlv+Lcxb3/H8TTZT6oryBF855patP4J+fNus+DGx3Nf4kLCGDP8a7",
	"FTfe7Lfxbrkd6dluk5G6tL7jdO8B/n74D0gLJGMZySKp883OlMTQta0MPoPdXmWFGzdW+240Vr4PU5b+",
	"fQ8AAP//vnsP3+oFAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
